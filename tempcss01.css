:root {
  --boxColor: #0ff7;
  --rotateSpeed: 30s;
  --bounceSpeed: 1.5s;
}
body {
  background-color: #000;
  min-height: 100vh;
  /*100% hieght of viewport*/
  display: flex;
  justify-content: center;
  /*horizontally center flex stuff*/
  align-items: center;
  /*vertically center flex stuff*/
  font-size: 75px;
  perspective: 10em;
  /*if there are further issues tray adding "transform-style: inherit;" to ball and cube*/
  perspective-origin: 50% calc(50% - 2em);
  /*starting in the middle and moving up 2em*/
}
.scene {
  position: relative;
  transform-style: preserve-3d;
  /*
   need rotate screen and bounce screen
   rotating infinitely at linear speed
   */
  animation: sceneRotate var(--rotateSpeed) infinite linear;
}
@keyframes sceneRotate {
  to {
    transform: rotateY(360deg);
  }
}
.ball {
  width: 1em;
  /*1 times size of current font*/
  height: 1em;
  border-radius: 50%;
  background: lightblue;
  position: absolute;
  /*if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling*/
  left: -0.5em;
  bottom: 1em;
  /*lighting*/
  background-image: radial-gradient(circle at top, lightblue, #000);
  animation: ballBounce var(--bounceSpeed) infinite ease-out, sceneRotate var(--rotateSpeed) infinite linear reverse;
  /* in sceneRotate, the ball is still flat, just rotating in opposite direction of screen*/
}
@keyframes ballBounce {
  0%, 100% {
    bottom: 0.5em;
  }
  50% {
    bottom: 3em;
    animation-timing-function: ease-in;
  }
}
.ballShadow {
  /*note: we put it here because organizationally it would be better to make the shadow as part of the cube than the ball?*/
  position: absolute;
  width: 100%;
  height: 100%;
  background-image: radial-gradient(#0007, #0000 50%);
  animation: ballShadow var(--bounceSpeed) infinite ease-out;
}
@keyframes ballShadow {
  0%, 8%, 93.5%, 100% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(2);
    opacity: 0.5;
    animation-timing-function: ease-in;
  }
}
.cube {
  transform-style: preserve-3d;
  width: 2em;
  height: 2em;
  position: absolute;
  /*sets position to ancestor, which is ball*/
  bottom: -1em;
  left: -1em;
  animation: cubeHeight var(--bounceSpeed) infinite linear;
}
@keyframes cubeHeight {
  /*this syntax works with scss preprocessor*/
  0%, 100% {
    height: 1.5em;
  }
  8%, 93.5% {
    height: 2em;
  }
}
.cube .left, .cube .right, .cube .front, .cube .back {
  position: absolute;
  width: 100%;
  height: 100%;
  background: var(--boxColor);
  box-shadow: 0 0 0.5em #000a inset;
  /*todo, figure what paramaters mean later*/
}
.cube .front {
  transform: translateZ(1em);
}
.cube .right {
  transform: rotateY(90deg) translateZ(1em);
}
.cube .back {
  transform: rotateY(180deg) translateZ(1em);
}
.cube .left {
  transform: rotateY(270deg) translateZ(1em);
}
.cube .top {
  position: absolute;
  width: 2em;
  /*2em because you don't want it to change with box animation*/
  height: 2em;
  background: var(--boxColor);
  transform: translateY(-50%) rotateX(90deg);
  box-shadow: 0 0 0.5em #000a inset;
}
.cube .bottom {
  position: absolute;
  width: 2em;
  /*2em because you don't want it to change with box animation*/
  height: 2em;
  background: #0007;
  bottom: 0;
  transform: translateY(50%) rotateX(90deg);
}
.floor {
  position: absolute;
  /*sets position to ancestor, ?which is cube which is ball?*/
  top: 1em;
  /**nbecause we cant the center of the floor to be the bottom of the box*/
  transform: translate(-50%, -50%) rotateX(90deg);
  /*without perpective this looks like a super thin line or nothing*/
  width: 15em;
  height: 15em;
  background-image: radial-gradient(#0000, #000 75%), repeating-conic-gradient(from 45deg, #111 0deg 90deg, #222 90deg 180deg);
  background-size: 100%, 1em 1em;
  /* makes the diamonds into the checkerboard pattern*/
}
#floortextfront {
  color:#FAF9F6;
  position: absolute;
  top: 60%;
  left: 50%;
  font-size: 30px;
  transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  animation-timing-function: ease-in;
}
#floortextback {
  color:#FAF9F6;
  position: absolute;
  top: 40%;
  left: 50%;
  font-size: 30px;
  transform: translate(-50%,-50%) rotate(180deg);
  -ms-transform: translate(-50%,-50%);
  animation-timing-function: ease-in;
}